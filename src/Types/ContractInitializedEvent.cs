using Concordium.Sdk.Exceptions;

namespace Concordium.Sdk.Types;

/// <summary>
/// Data generated as part of initializing a single contract instance.
/// </summary>
public class ContractInitializedEvent
{
    /// <summary>
    /// Contract version.
    /// </summary>
    public ContractVersion ContractVersion { get; init; }
    /// <summary>
    /// A reference to a smart contract module deployed on the chain.
    /// </summary>
    public ModuleReference ModuleReference { get; init; }
    /// <summary>
    /// Represent the contract address of the newly initialized contract instance.
    /// </summary>
    public ContractAddress ContractAddress { get; init; }
    /// <summary>
    /// Represent the CCD amount the contract instance was initialized with.
    /// </summary>
    public CcdAmount Amount { get; init; }
    /// <summary>
    /// A contract name with format: "init_<contract_name>".
    /// </summary>
    public ContractName InitName { get; init; }
    /// <summary>
    /// A list of events generated by a smart contract.
    /// </summary>
    public IList<ContractEvent> Events { get; init; }

    internal ContractInitializedEvent(Grpc.V2.ContractInitializedEvent initializedEvent)
    {
        this.ContractVersion = initializedEvent.ContractVersion switch
        {
            Grpc.V2.ContractVersion.V0 => ContractVersion.V0,
            Grpc.V2.ContractVersion.V1 => ContractVersion.V1,
            _ => throw new MissingEnumException<Grpc.V2.ContractVersion>(initializedEvent.ContractVersion)
        };
        this.ModuleReference = new ModuleReference(initializedEvent.OriginRef.Value);
        this.ContractAddress = ContractAddress.From(initializedEvent.Address);
        this.Amount = CcdAmount.FromMicroCcd(initializedEvent.Amount.Value);
        this.InitName = new ContractName(initializedEvent.InitName.Value);
        this.Events = initializedEvent.Events
            .Select(e => new ContractEvent(e.Value.ToByteArray()))
            .ToList();
    }
}
