using Concordium.Sdk.Exceptions;

namespace Concordium.Sdk.Types;

/// <summary>
/// Data generated as part of initializing a single contract instance.
/// </summary>
public class ContractInitializedEvent
{
    /// <summary>
    /// Contract version.
    /// </summary>
    public ContractVersion ContractVersion { get; init; }
    /// <summary>
    /// A reference to a smart contract module deployed on the chain.
    /// </summary>
    public ModuleReference ModuleReference { get; init; }
    /// <summary>
    /// Represent the contract address of the newly initialized contract instance.
    /// </summary>
    public ContractAddress ContractAddress { get; init; }
    /// <summary>
    /// Represent the CCD amount the contract instance was initialized with.
    /// </summary>
    public CcdAmount Amount { get; init; }
    /// <summary>
    /// A contract name with format: "init_&lt;contract_name&gt;".
    /// </summary>
    public ContractName InitName { get; init; }
    /// <summary>
    /// A list of events generated by a smart contract.
    /// </summary>
    public IList<ContractEvent> Events { get; init; }

    private ContractInitializedEvent(ContractVersion contractVersion, ModuleReference moduleReference,
        ContractAddress contractAddress, CcdAmount amount, ContractName initName, IList<ContractEvent> events)
    {
        this.ContractVersion = contractVersion;
        this.ModuleReference = moduleReference;
        this.ContractAddress = contractAddress;
        this.Amount = amount;
        this.InitName = initName;
        this.Events = events;
    }

    /// <summary>
    /// Create a instance of a Contract Initialization Event
    /// </summary>
    /// <param name="initializedEvent">initialization event</param>
    /// <returns>Contract Initialization Event</returns>
    /// <exception cref="MissingEnumException{ContractVersion}">When contract version not known</exception>
    internal static ContractInitializedEvent From(Grpc.V2.ContractInitializedEvent initializedEvent)
    {
        var contractVersion = initializedEvent.ContractVersion.Into();
        var moduleReference = new ModuleReference(initializedEvent.OriginRef.Value);
        var contractAddress = ContractAddress.From(initializedEvent.Address);
        var amount = CcdAmount.FromMicroCcd(initializedEvent.Amount.Value);
        var initName = new ContractName(initializedEvent.InitName.Value);
        var events = initializedEvent.Events
            .Select(e => new ContractEvent(e.Value.ToByteArray()))
            .ToList();
        return new ContractInitializedEvent(contractVersion, moduleReference, contractAddress, amount,
            initName, events);
    }
}
